[tool.poetry]
name = "timekill"
version = "0.1.0"
description = "A better way to kill time"
authors = ["Erik Bj√§reholt <erik@bjareho.lt>"]
readme = "README.md"
packages = [
    { include = "timekill", from = "src" },
]

[tool.poetry.scripts]
timekill = "timekill.main:main"

[tool.poetry.dependencies]
python = "^3.10,<3.12"

fastapi = "^0.85.0"
uvicorn = {extras = ["standard"], version = "^0.18.3"}

pandas = "^1.5.0"
requests = "^2.28.1"
click = "^8.1.3"
joblib = "^1.2.0"

openai = "^0.23.1"
praw = "^7.6.0"
desktop-notifier = "^3.4.0"


[tool.poetry.group.dev.dependencies]
# testing
pytest = "^7.1.3"
pytest-cov = "^4.0.0"

# packaging
pyinstaller = "^5.5"

# types
types-requests = "^2.28.11.2"

# checking, formatting, linting, fixing
mypy = "*"
black = "^22.10.0"
pylint = "^2.15.4"
flake8 = "^5.0.4"
flake8-pyproject = "^1.1.0.post0"
autoflake = "^1.7.4"
bandit = "^1.7.4"
reorder-python-imports = "^3.8.4"
isort = "^5.10.1"
autoimport = "^1.2.3"
pyupgrade = "^3.1.0"

[tool.pytest.ini_options]
markers = [
    "reddit: uses the reddit API",
    "openai: uses the OpenAI API",
]
addopts = "--cov=timekill --cov-report html --cov-report xml --cov-report term-missing"

[tool.pylint.messages_control]
#max-line-length = 120
disable = [
  "line-too-long",
  "too-few-public-methods",
  "fixme",
  "missing-docstring",
  "invalid-name",
  "logging-not-lazy",
  "logging-fstring-interpolation",
  "no-name-in-module",
  "disallowed-name",
#  "unused-argument",
#  "no-value-for-parameter",
#  "no-member",
#  "no-else-return",
#  "bad-whitespace",
#  "bad-continuation",
#  "protected-access",
]


[tool.bandit]
exclude_dirs = ["src/timekill/test"]
skips = ["B101"]

[tool.black]
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
py_version = 310
profile = "black"
force_grid_wrap = 4
src_paths = ["src/timekill"]

[tool.flake8]
ignore = ['E501', 'W503']
per-file-ignores = [
    '__init__.py:F401',
]
max-line-length = 88
exclude = [
    '.git',
    '.venv',
    'build',
    'dist',
    'venv',
    'cache',
]
count = true
statistics = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
